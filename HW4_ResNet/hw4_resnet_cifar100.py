# -*- coding: utf-8 -*-
"""HW4_resnet_CIFAR100

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vRUDlCNSCwzkA_ZeEREXPHuTa5PN_jtD

HW4 - Train ResNet on CIFAR100
"""

import torch
import torch.nn as nn
import torch.utils.data
import torchvision
import torchvision.transforms as transforms
import time
import pandas as pd

num_epochs = 50
batch_size = 128
learning_rate = 0.001

# torch.manual_seed(0)

transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])


trainset = torchvision.datasets.CIFAR100(root='./', train=True, download=False, transform=transform_train)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=8)

testset = torchvision.datasets.CIFAR100(root='./', train=False, download=False, transform=transform_test)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=8)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(device)

def conv3x3(in_planes, out_planes, stride=1, groups=1, padding=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=padding, groups=groups, bias=False, dilation=1)

def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)

class BasicBlock(nn.Module):
    expansion = 1
    
    def __init__(self, inplanes, planes, stride=1, downsample=None):
        
        super(BasicBlock, self).__init__()

        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm2d(planes)
        
        self.downsample = downsample
        self.stride = stride
        
    def forward(self, x):

        residual = x


        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        
        out = self.conv2(out)
        out = self.bn2(out)
        
        if self.downsample is not None:
            residual = self.downsample(x)
        
        out += residual
        out = self.relu(out)
        
        return out

class MyResNet(nn.Module):
    
    def __init__(self, block, layers, num_classes, inplanes):
        
        super(MyResNet, self).__init__()
        
        self._norm_layer = nn.BatchNorm2d

        self._inplanes = inplanes
        self._dilation = 1

        self.conv1 = conv3x3(inplanes, 32, stride=1, padding=1)
        self._inplanes = 32
        self.bn1 = nn.BatchNorm2d(self._inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.dropout = nn.Dropout(0.2)
        
        self.conv2_x = self._make_layer(block, 32, layers[0], 1)
        self.conv3_x = self._make_layer(block, 64, layers[1], 2)
        self.conv4_x = self._make_layer(block, 128, layers[2], 2)
        self.conv5_x = self._make_layer(block, 256, layers[3], 2)
        
        self.mp = nn.MaxPool2d(kernel_size=2)
        
        self.fc = nn.Linear(256*2*2, num_classes)
        
    def _make_layer(self, block, planes, blocks, stride=1):
        
        norm_layer = nn.BatchNorm2d
        downsample = None

        if stride != 1 or self._inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self._inplanes, planes * block.expansion, stride),
                norm_layer(planes * block.expansion),
            )

        layers = []
        layers.append(block(inplanes=self._inplanes, planes=planes, stride=stride,
                            downsample=downsample))
        self._inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(inplanes=self._inplanes, planes=planes))

        return nn.Sequential(*layers)

    def forward(self, x):
        
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.dropout(out)
        

        out = self.conv2_x(out)
        out = self.conv3_x(out)
        out = self.conv4_x(out)
        out = self.conv5_x(out)


        out = self.mp(out)
        out = torch.flatten(out, 1)
        out = self.fc(out)
        
        return out

def calculate_accuracy(model, data_loader):

    correct = 0
    total = 0
    with torch.no_grad():
        model.eval()
        for batch_idx, (X_test_batch, Y_test_batch) in enumerate(data_loader):
            X_test_batch, Y_test_batch= X_test_batch.to(device),Y_test_batch.to(device)
            
            outputs = model(X_test_batch)
            _, predicted = torch.max(outputs.data, 1)
            total += Y_test_batch.size(0)
            correct += (predicted == Y_test_batch).sum().item()

    return correct/total

def train(epoch, model, train_loader, test_loader):

    # Train the model
    model.train()
    for batch_idx, (X_train_batch, Y_train_batch) in enumerate(train_loader):
        X_train_batch, Y_train_batch = X_train_batch.to(device), Y_train_batch.to(device)

        # Forward Pass
        outputs = model(X_train_batch)
        loss = criterion(outputs, Y_train_batch)
        
        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        if (batch_idx+1) % 100 == 0:
            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}' 
                   .format(epoch+1, num_epochs, batch_idx+1, total_step, loss.item()))

    # Calculate the accuracy
    # on training set
    train_acc = calculate_accuracy(model, train_loader)

    # on testing set
    test_acc = calculate_accuracy(model, test_loader)

    print('Accuracy on train: {:.2f} %, on test: {:.2f} %'
            .format(100 * train_acc, 100 * test_acc))
    
    return (train_acc, test_acc)

model = MyResNet(BasicBlock, [2, 4, 4, 2], 100, 3).to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = len(trainloader)

acc_df = pd.DataFrame(columns=["Train Accuracy", "Test Accuracy"])
for epoch in range(num_epochs):
    # Train the model
    train_acc, test_acc = train(epoch, model, trainloader, testloader)

    acc_df = acc_df.append({"Train Accuracy": train_acc,
                            "Test Accuracy": test_acc},
                           ignore_index=True)

calculate_accuracy(model, testloader)

# save the accuracy
acc_df.to_csv("./accuracy_records.csv")