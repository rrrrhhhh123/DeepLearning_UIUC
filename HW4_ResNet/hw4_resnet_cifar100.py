# -*- coding: utf-8 -*-
"""HW4_resnet_CIFAR100

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vRUDlCNSCwzkA_ZeEREXPHuTa5PN_jtD

HW4 - Train ResNet on CIFAR100
"""

import torch
import torch.nn as nn
import torch.utils.data
import torchvision
import torchvision.transforms as transforms
import time
import pandas as pd

# For Colab, mount the working directory to Google Drive
from google.colab import drive
import os
drive.mount('/content/drive/')
os.chdir("drive/My Drive/DeepLearningHw/HW4")

import MyResNet
import MyUtils

# hyperparameters
num_epochs = 50
batch_size = 128
learning_rate = 0.001

transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])


trainset = torchvision.datasets.CIFAR100(root='./', train=True, download=True, transform=transform_train)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=8)

testset = torchvision.datasets.CIFAR100(root='./', train=False, download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=8)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(device)

model = MyResNet.MyResNet(MyResNet.BasicBlock, [2, 4, 4, 2], 100, 3).to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = len(trainloader)

acc_df = pd.DataFrame(columns=["Train Accuracy", "Test Accuracy"])
for epoch in range(num_epochs):
    # Train the model
    train_acc, test_acc = MyUtils.train(epoch, model, trainloader, testloader,
                                        device, optimizer, criterion, num_epochs,
                                        total_step)

    acc_df = acc_df.append({"Train Accuracy": train_acc,
                            "Test Accuracy": test_acc},
                           ignore_index=True)

calculate_accuracy(model, testloader)

# save the accuracy
acc_df.to_csv("./accuracy_cifar100.csv")